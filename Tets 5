function onEdit(e) {
  const range = e.range;
  const col = range.getColumn();
  const row = range.getRow();
  const sheet = e.source.getActiveSheet();
  const sheetName = sheet.getName();

  // Handle timestamp and modifiedBy for all edited cells in the range
  if (sheetName == 'Device List' && col != 6 && col != 7 && row != 1) {
    let ss = SpreadsheetApp.getActiveSpreadsheet();
    let timeStamp = new Date();
    let modifiedBy = Session.getActiveUser().getEmail();

    for (let i = 0; i < range.getNumRows(); i++) {
      const currentRow = row + i;
      sheet.getRange(currentRow, 6).setValue(timeStamp);
      sheet.getRange(currentRow, 7).setValue(modifiedBy);
    }
  }

  // Handle duplicate marking and label setting for the range
  if (sheetName == 'Device List' && col == 1) {
    markDuplicates(sheet);
    handleLabels(sheet, range);
  }

  // Apply capital letters for edited range
  makeCaps(range);

  // Check columns filled logic
  columnsFilled(sheet);
}

function makeCaps(range) {
  const values = range.getValues();
  for (let i = 0; i < values.length; i++) {
    values[i][0] = values[i][0].toString().toUpperCase();
  }
  range.setValues(values);
}

function markDuplicates(sheet) {
  const data = sheet.getRange("A2:A" + sheet.getLastRow()).getValues();
  let duplicateTracker = {};

  for (let i = 0; i < data.length; i++) {
    let value = data[i][0];
    if (value) {
      if (duplicateTracker[value]) {
        sheet.getRange("B" + (i + 2)).setValue("Duplicate label").setBackground("#ea9999");
      } else {
        duplicateTracker[value] = true;
      }
    }
  }
}

function handleLabels(sheet, range) {
  const startRow = range.getRow();
  const numRows = range.getNumRows();

  for (let i = 0; i < numRows; i++) {
    const currentRow = startRow + i;
    const cell = sheet.getRange(currentRow, 1); // Column A
    const cellValue = cell.getValue();
    const nextCell = cell.offset(0, 1); // Column B

    if (isUniqueLabel(sheet, cellValue, currentRow)) {
      if (cellValue.startsWith("CR ")) {
        nextCell.setValue("Access");
        cell.setBackground("white");
      } else if (cellValue.startsWith("CAM ")) {
        nextCell.setValue("CCTV");
        cell.setBackground("white");
      } else if (cellValue.startsWith("I ")) {
        nextCell.setValue("Intercom");
        cell.setBackground("white");
      } else if (cellValue.startsWith("M ")) {
        nextCell.setValue("Monitor Point");
        cell.setBackground("white");
      } else if (cellValue === "") {
        nextCell.clearContent();
      } else {
        nextCell.setValue("INCORRECT LABEL");
        cell.setBackground("#ea9999");
        nextCell.setBackground("#ea9999");
      }
    } else {
      nextCell.clearContent();
    }
  }
}

function columnsFilled(sheet) {
  const data = sheet.getRange("A2:A" + sheet.getLastRow()).getValues();

  for (let row = 0; row < data.length; row++) {
    const valueA = data[row][0];
    const cellC = sheet.getRange("C" + (row + 2));
    const cellD = sheet.getRange("D" + (row + 2));
    const cellE = sheet.getRange("E" + (row + 2));

    if (valueA && !cellC.getValue()) {
      cellC.setBackground("#ea9999");
      cellC.setNote("Please change status");
    } else {
      cellC.setBackground("white");
      cellC.clearNote();
    }

    if (valueA && !cellD.getValue()) {
      cellD.setBackground("#ea9999");
      cellD.setNote("Please add Project Name (CDRXXXXX)");
    } else {
      cellD.setBackground("white");
      cellD.clearNote();
    }

    if (valueA && !cellE.getValue()) {
      cellE.setBackground("#ea9999");
      cellE.setNote("Please add Stage (STAGE X)");
    } else {
      cellE.setBackground("white");
      cellE.clearNote();
    }
  }
}

function isUniqueLabel(sheet, value, currentRow) {
  const data = sheet.getRange("A2:A" + sheet.getLastRow()).getValues();
  for (let i = 0; i < data.length; i++) {
    if (data[i][0] === value && (i + 2) !== currentRow) {
      return false;
    }
  }
  return true;
}
