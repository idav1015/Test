function onEdit(e) {
  const range = e.range;
  const sheet = e.source.getActiveSheet();
  const sheetName = sheet.getName();
  const startRow = range.getRow();
  const numRows = range.getNumRows();
  const numCols = range.getNumColumns();

  if (sheetName === 'Device List') {
    for (let i = 0; i < numRows; i++) {
      for (let j = 0; j < numCols; j++) {
        const cell = sheet.getRange(startRow + i, range.getColumn() + j);
        handleEdit(sheet, cell, startRow + i);
      }
    }
    columnsFilled(sheet);
  }
}

function handleEdit(sheet, cell, row) {
  const col = cell.getColumn();

  // Update timestamp and modifiedBy for edited rows
  if (col !== 6 && col !== 7 && row !== 1) {
    const timeStamp = new Date();
    sheet.getRange(row, 6).setValue(timeStamp);
    const modifiedBy = Session.getActiveUser().getEmail();
    sheet.getRange(row, 7).setValue(modifiedBy);
  }

  // Capitalize the cell value
  const value = cell.getValue();
  cell.setValue(value.toString().toUpperCase());

  // Handle column A edits
  if (col === 1) {
    if (!markDuplicates(sheet, cell, row)) {
      handleLabel(sheet, cell, row);
    }
  }
}

function markDuplicates(sheet, range, currentRow) {
  const data = sheet.getRange("A2:A" + sheet.getLastRow()).getValues();
  let duplicateTracker = {};
  let isDuplicate = false;

  for (let i = 0; i < data.length; i++) {
    const value = data[i][0];
    if (value) {
      if (duplicateTracker[value]) {
        sheet.getRange("B" + (i + 2)).setValue("Duplicate label").setBackground("#ea9999");
        if ((i + 2) === currentRow) {
          isDuplicate = true;
        }
      } else {
        duplicateTracker[value] = true;
      }
    }
  }

  if (isDuplicate) {
    range.offset(0, 1).setValue("Duplicate label").setBackground("#ea9999");
  }

  return isDuplicate;
}

function handleLabel(sheet, range, row) {
  const cellValue = range.getValue();
  const nextCell = range.offset(0, 1);
  const unique = isUniqueLabel(sheet, cellValue, row);

  if (unique) {
    let label;
    let color = "white";
    switch (true) {
      case cellValue.startsWith("CR "):
        label = "Access";
        break;
      case cellValue.startsWith("CAM "):
        label = "CCTV";
        break;
      case cellValue.startsWith("I "):
        label = "Intercom";
        break;
      case cellValue.startsWith("M "):
        label = "Monitor Point";
        break;
      case cellValue === "":
        nextCell.clearContent();
        return;
      default:
        label = "INCORRECT LABEL";
        color = "#f9cb9c";
    }
    nextCell.setValue(label).setBackground(color);
    range.setBackground(color);
  } else {
    nextCell.clearContent();
  }
}

function columnsFilled(sheet) {
  const data = sheet.getRange("A2:A" + sheet.getLastRow()).getValues();

  for (let row = 0; row < data.length; row++) {
    const valueA = data[row][0];
    const rowIndex = row + 2; // Adjust for header row
    const cells = [
      sheet.getRange("A" + rowIndex),
      sheet.getRange("B" + rowIndex),
      sheet.getRange("C" + rowIndex),
      sheet.getRange("D" + rowIndex),
      sheet.getRange("E" + rowIndex),
    ];

    if (!valueA) {
      cells[0].setBackground("white");
      cells[1].setBackground("white");
    }
    
    updateCellBackgroundAndNote(cells[2], valueA, "Please change status", "#ea9999");
    updateCellBackgroundAndNote(cells[3], valueA, "Please add Project Name (CDRXXXXX)", "#f9cb9c");
    updateCellBackgroundAndNote(cells[4], valueA, "Please add Stage (STAGE X)", "#f9cb9c");
  }
}

function updateCellBackgroundAndNote(cell, condition, note, color) {
  if (condition && !cell.getValue()) {
    cell.setBackground(color);
    cell.setNote(note);
  } else {
    cell.setBackground("white");
    cell.clearNote();
  }
}

function isUniqueLabel(sheet, value, currentRow) {
  const data = sheet.getRange("A2:A" + sheet.getLastRow()).getValues();
  for (let i = 0; i < data.length; i++) {
    if (data[i][0] === value && (i + 2) !== currentRow) {
      return false;
    }
  }
  return true;
}
